
ASSEMBLY LANGUAGE BASICS:


section	.text     ;'.text' IS OPTIONAL
	global _start   ;must be declared for using gcc
_start:           ;tell linker entry point   (LABEL)
	mov	edx, len    ;message length      (REGISTER)
	mov	ecx, msg    ;message to write
	mov	ebx, 1	    ;file descriptor (stdout)
	mov	eax, 4	    ;system call number (sys_write)
	int	0x80        ;call kernel
	mov	eax, 1	    ;system call number (sys_exit)
	int	0x80        ;call kernel

section	.data

msg	db	'Hello, world!',0xa	;our dear string
len	equ	$ - msg			;length of our dear string





General-purpose:

Register  	Name	        Subregisters(bits)
RAX	        Accumulator	  EAX(32), AX(16), AH(8), AL(8)
RBX	        Base	        EBX(32), BX(16), BH(8), BL(8)
RCX	        Counter	      ECX(32), CX(16), CH(8), CL(8)
RDX	        Data	        EDX(32), DX(16), DH(8), DL(8)
RSI	        Source	       ESI(32), SI(16), SL(8)
RDI	        Destination	    EDI(32), DI(16), DL(8)
RBP	        Base pointer	   EBP(32), BP(16), BPL(8)
RSP	        Stack pointer	    ESP(32), SP(16), SPL(8)
R8-R15	    New registers	     R8D-R15D(32), R8W-R15W(16), R8B-R15B(8)






**  PA4: SUM OF 3 NUMBERS  **

;;;;;;;;;;;;;;;;;;;;	MACRO DEFINITIONS	;;;;;;;;;;;;;;;;;;;;
(Line 21) Create the read and write functions with
two parameters.


;;;;;;;;;;;;;;;;;;;;	DATA SEGMENT	;;;;;;;;;;;;;;;;;;;;
(Line 43) Format the prompt by applying text and then
the length required required for the text of the prompt.


;;;;;;;;;;;;;;;;;;Insert carriage return and line feed;;;;;;;;;;;;;;;;;;;
(Line 54)
crlf db 0x0d, 0x0a
lencrlf	equ	$ - crlf				;The length of Prompt2

****   Unsure of the above     ****************



;;;;;;;;;;;;;;;;;;Output Sum;;;;;;;;;;;;;;;;;;;
(LIne 57)
dispSum	db	'The sum of the entered numbers is: ';Message for sum
lenDispSum	equ	$ - dispSum				;Length of Message for echo




;;;;;;;;;;;;;;;;;;num1 variable;;;;;;;;;;;;;;;;;;;
(Line 60) Here we set up a 32-bit int (255) for 'num1'
num1 db 0xff







**  PA5: NUMBER TO WORD  **


In NASM, to create a program that uses the switch/case
type of coding construct requires heavy use of
the compare instruction (cmp) and the
jump if not equal instruction (jne).
